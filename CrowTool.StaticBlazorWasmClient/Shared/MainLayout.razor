@using System.Timers
@inherits LayoutComponentBase
@implements IDisposable
@inject HttpClient Http
@inject IConfiguration Config
@inject NavigationManager NavMan
@inject StateContainerService StateContainer
@inject ISyncLocalStorageService LocalStorage

<PageTitle>CrowTool</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    @if (!tokenExpired)
                    {
                        @Body
                        if (loaded)
                        {
                            <Footer />
                        }
                    }
                </ChildContent>
                <ErrorContent Context="ex">
                    <p class="error">@ex.Message</p>
                </ErrorContent>
            </ErrorBoundary>

        </article>
    </main>
</div>

@code {
    BrowserStorage? bStorage;
    ErrorBoundary? errorBoundary;

    private Timer? timer;
    bool tokenExpired = false;
    int minutesToExpire = 3;
    int minutesToCheck = 2;
    bool loaded = false;

    protected override async Task OnInitializedAsync()
    {
        StateContainer.OnChange += StateContainerChanged;

        bStorage = LocalStorage.GetItem<BrowserStorage>("b_stor");
        if (bStorage != null && !string.IsNullOrEmpty(bStorage.Val))
        {
            byte[] bytes = Convert.FromBase64String(bStorage.Val);
            StateContainer.UserInfo = JsonSerializer.Deserialize<TwitterLoginResponse>(bytes)!;

            // check if token has expired for returning user
            long ticksLeft = StateContainer.UserInfo.ExpiresInTicks - DateTime.UtcNow.Ticks;
            TimeSpan expires = new TimeSpan(ticksLeft);

            if (expires.TotalMinutes <= minutesToExpire)
            {
                tokenExpired = true;
                await RefreshTokens();
            }
        }
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // always start timer at first render
            if (timer is null)
            {
                Console.WriteLine("Init.");
                timer = new Timer(1000 * 60 * minutesToCheck); // check every x minutes
                timer.Elapsed += (sender, eventArgs) => OnTimerCallback();
                timer.Enabled = true;
                timer.Start();
            }
        }
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
        loaded = true;
    }

    private void OnTimerCallback() // for expired token
    {
        _ = InvokeAsync(async () =>
        {
            if (StateContainer.UserInfo.UserId != 0) // user logged in.
            {
                // #TODO CHECK TICKS LEFT, if someone edited localstorage, delete localstorage
                Console.WriteLine("Token Check.");
                long ticksLeft = StateContainer.UserInfo.ExpiresInTicks - DateTime.UtcNow.Ticks;
                TimeSpan expires = new TimeSpan(ticksLeft);
                if (expires.TotalMinutes <= minutesToExpire)
                    await RefreshTokens();
            }
        });
    }

    public async Task RefreshTokens()
    {
        RefreshRequestResponse? refreshRequestResponse = new()
            {
                AccessToken = StateContainer.UserInfo.AccessToken,
                RefreshToken = StateContainer.UserInfo.RefreshToken
            };

        Console.WriteLine("Refreshing Token.");

        string? PostToBackEndApiUrl = $"https://{Config["BackEndUrl"]}/OAuth2/Refresh";
        HttpResponseMessage? responseMessage = await Http.PostAsJsonAsync(PostToBackEndApiUrl, refreshRequestResponse);

        if (responseMessage.IsSuccessStatusCode)
        {
            refreshRequestResponse = await responseMessage.Content.ReadFromJsonAsync<RefreshRequestResponse>();

            if (refreshRequestResponse?.ExpiresIn == Helpers.TwitterExpiresInSeconds)
            {
                StateContainer.UserInfo.AccessToken = refreshRequestResponse.AccessToken;
                StateContainer.UserInfo.RefreshToken = refreshRequestResponse.RefreshToken;
                StateContainer.UserInfo.ExpiresInTicks = DateTime.UtcNow.AddSeconds(refreshRequestResponse.ExpiresIn).Ticks;

                BinaryData jsonData = BinaryData.FromObjectAsJson(StateContainer.UserInfo, Helpers.JsonSeriOptions());
                string jsonDataBase64 = Convert.ToBase64String(jsonData);
                bStorage!.Val = jsonDataBase64;
                LocalStorage.SetItem<BrowserStorage>("b_stor", bStorage);
                tokenExpired = false;

                //// #TODO Get Me! - User may have changed his UserName, Handle (Name) and/or ProfileImage, new call to 👇
                //TwitterContext twitterCtx = new(auth);
                //TwitterUserQuery? response = await (
                //	from usr in twitterCtx.TwitterUser
                //	where usr.Type == UserType.Me
                //	select usr
                //).SingleOrDefaultAsync();
            }
        }
        else // BadRequest
        {
            string resp = await responseMessage.Content.ReadAsStringAsync();
            if (resp == "ReInit")
            {
                Console.WriteLine("Couldn't refresh tokens, please log in again ...");
                StateContainer.UserInfo.UserId = 0;
                StateContainer.UserInfo.Name = "";
                tokenExpired = false;
                await InvokeAsync(StateHasChanged);
            }
            //// TODO
            //else if (resp == "Connection")
            //{

            //}
        }
    }

    public void Dispose()
    {
        timer?.Dispose();
        StateContainer.OnChange -= StateHasChanged;
    }

    private void StateContainerChanged()
    {
        StateHasChanged();
    }
}
