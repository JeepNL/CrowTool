@page "/"
@inject IConfiguration Config
@inject NavigationManager NavMan
@inject StateContainerService StateContainer

<PageTitle>Index | CrowTool</PageTitle>

<h1>Hello, @($"{userName}!")</h1>

<p style="margin-bottom: 1rem;">
    Welcome to your new app.
</p>

<BaseLayerLuminance Value="(float?)0.15">
    <FluentCard BackReference="@context">
        <div class="contents">
            <SurveyPrompt Title="How is Blazor working for you?" />
        </div>
    </FluentCard>
</BaseLayerLuminance>

@if (userId == 0)
{
    <FluentButton style="margin-top: 2em" Appearance="Appearance.Accent" @onclick=login>Log in with Twitter</FluentButton>
}
@*else
{
    <FluentButton style="margin-top: 2em" Appearance="Appearance.Accent" @onclick=YourTweets>Your Tweets</FluentButton>
}*@

@code {
    private string userName = string.Empty;
    private long userId;

    //protected override async Task OnInitializedAsync()
    protected override void OnInitialized()
    {
        userId = StateContainer.UserInfo.UserId;
        userName = (string.IsNullOrEmpty(StateContainer.UserInfo.Name)) ? "Twitter" : StateContainer.UserInfo.Name;
        //if (userId > 0)
        //{
        //    await CallFromBrowserL2T();
        //}
    }

    private async Task YourTweets()
    {
        OAuth2Authorizer? auth = new()
            {
                CredentialStore = new OAuth2CredentialStore()
                {
                    AccessToken = StateContainer.UserInfo.AccessToken
                }
            };
        IOAuth2CredentialStore? credentials = auth.CredentialStore as IOAuth2CredentialStore;

        // HttpRequest to Twitter API via YARP (Proxy, Yet Another Reverse Proxy)
        string? yarpUrl = $"{Config["YarpUrl"]}";
        TwitterContext twitterCtx = new(auth)
            {
                BaseUrl = $"https://{yarpUrl}/1.1/",
                BaseUrl2 = $"https://{yarpUrl}/2/"
            };

        // Get 'Me' (User)
        TwitterUserQuery? response = await (
            from usr in twitterCtx.TwitterUser
            where usr.Type == UserType.Me
                && usr.Expansions == $"{ExpansionField.AllUserFields}"
                && usr.UserFields == $"{UserField.AllFields}"
            select usr
        ).SingleOrDefaultAsync();

        var user = response?.Users?.SingleOrDefault();

        //Console.WriteLine($"***** CallFromBrowserL2T - User: {user?.Name}");
    }


    //private async Task CallFromBrowserL2T()
    //{
    //    OAuth2Authorizer? auth = new()
    //        {
    //            CredentialStore = new OAuth2CredentialStore()
    //            {
    //                AccessToken = StateContainer.UserInfo.AccessToken
    //            }
    //        };
    //    IOAuth2CredentialStore? credentials = auth.CredentialStore as IOAuth2CredentialStore;

    //    // HttpRequest to Twitter API via YARP (Proxy, Yet Another Reverse Proxy)
    //    string? yarpUrl = $"{Config["YarpUrl"]}";
    //    TwitterContext twitterCtx = new(auth)
    //        {
    //            BaseUrl = $"https://{yarpUrl}/1.1/",
    //            BaseUrl2 = $"https://{yarpUrl}/2/"
    //        };

    //    // Get 'Me' (User)
    //    TwitterUserQuery? response = await (
    //        from usr in twitterCtx.TwitterUser
    //        where usr.Type == UserType.Me
    //            && usr.Expansions == $"{ExpansionField.AllUserFields}"
    //            && usr.UserFields == $"{UserField.AllFields}"
    //        select usr
    //    ).SingleOrDefaultAsync();

    //    var user = response?.Users?.SingleOrDefault();

    //    Console.WriteLine($"***** CallFromBrowserL2T - User: {user?.Name}");
    //}

    private void login()
    {
        NavMan.NavigateTo("/twitter/login");
    }
}
